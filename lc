import re
import time
from io import BytesIO
from typing import Any, Dict, List
import os
import yaml
import pickle
# Modules to Import
import openai
from openai import OpenAI
import streamlit as st
from langchain import LLMChain, OpenAI
from langchain.chat_models import ChatOpenAI
from langchain.agents import AgentExecutor, Tool, ZeroShotAgent
from langchain.chains import RetrievalQA
from langchain.chains.question_answering import load_qa_chain
from langchain.docstore.document import Document
from langchain.document_loaders import PyPDFLoader
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.llms import OpenAI
from langchain.memory import ConversationBufferMemory
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import VectorStore
from langchain.vectorstores.faiss import FAISS
from langchain.callbacks import get_openai_callback
from pypdf import PdfReader
from langchain.memory import ConversationBufferMemory, ReadOnlySharedMemory
from langchain.llms import OpenAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain.vectorstores import Chroma
import json
os.environ["OPENAI_API_KEY"] = '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'
api = os.getenv("OPENAI_API_KEY")
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def sidebar():
    with st.sidebar:
        # st.markdown(
            # "## How to use\n"
            # "1. Enter your [OpenAI API key](https://platform.openai.com/account/api-keys) below\n"
            # "2. Upload a pdf, docx, or txt file\n"
            # "3. Ask a question about the document\n"
        # )
        # api_key_input = st.text_input(
            # "OpenAI API Key",
            # type="password",
            # placeholder="Paste your OpenAI API key here",
            # help="You can get your API key from https://platform.openai.com/account/api-keys.",
            # value=os.environ.get("OPENAI_API_KEY", None) or st.session_state.get("OPENAI_API_KEY", ""),
        # )

        # st.session_state["OPENAI_API_KEY"] = api_key_input

        st.image('logo-nobg.png', caption='', use_column_width=True)
        st.markdown("---")
        
        # Name of project: BeFiWMan, Fin. 
        st.markdown("# SmartFolio")
        st.markdown("---")

        st.markdown("# About")

        st.markdown(
            """
            Welcome to our cutting-edge Wealth Advisor powered by advanced AI technology. 
            Seamlessly blending financial expertise with personalized insights, our tool revolutionizes wealth management. 
            Through dynamic questionnaires, it delves into your financial aspirations, analyzing behavioral biases to craft a bespoke strategy.
            """
        )
        st.markdown(
        """
        Powered by GPT, it comprehensively understands your unique profile, offering astute recommendations for optimal asset allocation. 
        From risk tolerance to long-term goals, our Wealth Advisor is your digital companion on the path to financial prosperity, ensuring informed decisions aligned with your individual characteristics. 
        Embrace the future of wealth management — intelligent, intuitive, and tailored just for you.
        """
        )
        st.markdown("---")
        
        st.markdown("# References")
     
        st.markdown("- Wealth Management Treatise")
        st.markdown("- Behavioral Finance and Wealth Management")
        st.markdown("---")
        
        st.markdown("This tool is a work in progress.")
        st.markdown("Made by: Behavioral Finance Ninjas")
        st.markdown("---")

def main():
    sidebar()

    all_qna = {}

    def create_question(question, alt_question=None, options=None, input_type='text'):
        st.markdown(f"<h6 style='margin-bottom: -3em;'>{question}</h6>", unsafe_allow_html=True)
        if options is None:
            if input_type == 'text':
                answer = st.text_input('', key=f'{question}')
            elif input_type == 'number':
                answer = st.number_input('', key=f'{question}', step=1, format='%d')
            elif input_type == 'yesno':
                answer = st.radio('', ['Yes', 'No'], key=f'{question}')
        
        else:
            
            if input_type == 'multiple':
                answer = st.multiselect('', options, key=f'{question}')
            else:
                answer = st.selectbox('', options, key=f'{question}')
        
        all_qna[question] = answer
        
        return answer




    st.title('Questionnaire')



    # Title of the questionnaire
    # st.title('Section A')

    # st.markdown("___")
    st.markdown(f"<center><h4>Client Information</h4></center>", unsafe_allow_html=True)

    col1,col2 = st.columns(2)

    # Questions
    with col1:
        name = create_question('Name')
        age = create_question('Age', input_type='number')
        gender = create_question('Gender', options=['Male', 'Female', 'Other'])
        marital_status = create_question('Marital Status', options=['Single', 'Married', 'Divorced', 'Widowed'])
        
        
    with col2:
        occupation = create_question('Occupation')
        income_options = ['$500,000', '$500,000 - $5,000,000', '$5,000,000 - $10,000,000', '>$10,000,000']
        annual_income = create_question('Annual Income', options=income_options)
        retirement_age = create_question('Target Retirement Age', input_type='number')
        dependents = create_question('No. of dependent family members', input_type='number')

    st.markdown("___")
    st.markdown(f"<center><h4>Investment Objectives</h4></center>", unsafe_allow_html=True)

    col3,col4 = st.columns(2)

    # Questions
    with col3:
        investment_objective_options = [
            'Capital preservation (saving, i.e., preserving capital and avoiding loss of value)',
            'Income generation (constant income in the form of dividends, bond yields, and interest payments)',
            'Long-term growth (do not seek income, capital appreciation)',
            'Growth with Income (seek current income but also seek income and capital growth over time)'
        ]
        investment_objective = create_question('What are your primary investment objective? (Choose one)', options=investment_objective_options)

        # st.markdown(f"<h2>Time Horizon</h2>", unsafe_allow_html=True)
        time_horizon_options = ['Short-term (0-3 years)', 'Medium-term (3-10 years)', 'Long-term (10+ years)']
        investment_time_horizon = create_question('What is your investment time horizon? (Choose one)', options=time_horizon_options)

    with col4:
        short_term_goals_options = [
            'Retirement savings', 'Education funding', 'Wealth transfer', 'Home Purchase/Upgrade/Repairs',
            'Vehicle Purchase', 'Special occasions (like weddings)', 'Philanthropy and charitable giving',
            'Vacation', 'Debt Elimination', 'Other (please specify)'
        ]
        short_term_goals = create_question('Do you have any financial goals below in the short-term? (select all that apply)', options=short_term_goals_options, input_type='multiple')

        long_term_goals_options = [
            'Retirement savings', 'Education funding', 'Wealth transfer', 'Home Purchase', 'Vehicle Purchase',
            'Philanthropy and charitable giving', 'Debt Elimination', 'Other (please specify)'
        ]
        long_term_goals = create_question('Do you have any financial goals below in the long-term? (select all that apply)', options=long_term_goals_options, input_type='multiple')


    st.markdown("___")
    st.markdown(f"<center><h4>Liquidity Needs</h4></center>", unsafe_allow_html=True)

    col5,col6 = st.columns(2)

    # Questions
    with col5:
        liquidity_needs = create_question('Do you have any liquidity requirements or emergency funds to be considered?', input_type='yesno')

    annual_withdrawal_percentage = None
    withdrawal_time_frame = None

    if liquidity_needs == 'Yes':
        with col6:
            annual_withdrawal_options = ['< 2%', '2% - 6%', '> 6%']
            annual_withdrawal_percentage = create_question('What % of the account’s value will you need annually?', options=annual_withdrawal_options)

            withdrawal_time_options = ['Immediately', '1 – 3 Years', '3 – 5 Years', '5 – 10 Years', '10 – 15 Years', 'Over 15 Years']
            withdrawal_time_frame = create_question('When do you expect to begin withdrawals from account for your goals?', options=withdrawal_time_options)


    st.markdown("___")
    st.markdown(f"<center><h4>Other Preferences</h4></center>", unsafe_allow_html=True)

    # Questions
    international_investments = create_question('Would you consider allocating a portion of your portfolio to international investments', input_type='yesno')

    real_estate_investments = create_question('Would you consider allocating a portion of your portfolio to real estate investments?', input_type='yesno')

    municipal_bonds = create_question('Would you consider allocating a portion of your portfolio to tax-exempt Municipal bonds?', input_type='yesno')
    st.markdown("___")



# # # ____________________________________________________________________________________________________
# # # ____________________________________________________________________________________________________
# # # ____________________________________________________________________________________________________



    # st.title('Section B')    
    
    st.markdown(f"<center><h4>Risk Appetite</h4></center>", unsafe_allow_html=True)
    
    st.markdown("___")
    
    # Questions
    question_1_options = ['A. Sell all of the investments? You do not intend to take risks.',
                        'B. Sell a portion of your portfolio to cut your losses and reinvest into more secure investment assets?',
                        'C. Hold the investment and sell nothing, expecting performance to improve?',
                        'D. Invest more funds to lower your average investment price?.']
    question_1 = create_question('1. Assume you had an initial investment portfolio worth 100,000 dollars. If, due to market conditions, your portfolio fell to 85,000 dollars, would you:', options=question_1_options)

    question_2_options = ['A. I am always concerned about possible losses.',
                        'B. I am somewhat concerned about possible losses.',
                        'C. I usually consider possible gains.',
                        'D. I always consider possible gains.']
    question_2 = create_question('2. When considering your investments and making investment decisions, do you think about the impact of possible losses or possible gains?', options=question_2_options)

    question_3_options = ['A. I am primarily concerned with limiting risk. I am willing to accept lower expected returns in order to limit my chance of loss.',
                        'B. Limiting risk and maximizing return are of equal importance to me. I am willing to accept moderate risk and a moderate chance of loss in order to achieve moderate returns.',
                        'C. I am primarily concerned with maximizing the returns of my investments. I am willing to accept high risk and a high chance of loss in order to maximize my investment return potential.']
    question_3 = create_question('3. Which one of the following statements best describes your attitude toward the trade-off between risk and return?', options=question_3_options)

    question_4_options = ['A. 100% in Investment A and 0% in Investment B',
                        'B. 80% in Investment A and 20% in Investment B',
                        'C. 50% in Investment A and 50% in Investment B',
                        'D. 20% in Investment A and 80% in Investment B',
                        'E. 0% in Investment A and 100% in Investment B']
    question_4 = create_question('4. Consider two different investments:\nInvestment A, which provides an average annual return of 5% with a minimal risk of loss of value\nInvestment B, which provides an average annual return of 10% and a potential loss of 25% or more in any year.\nHow would you divide your investment dollars?', options=question_4_options)

        # st.image('image.jpg', caption='', use_column_width=True)


    st.markdown("___")


    # # # ____________________________________________________________________________________________________
    # # # ____________________________________________________________________________________________________
    # # # ____________________________________________________________________________________________________



    # st.title('Section C')

    
    st.markdown(f"<center><h4>Behavioral Biases</h4></center>", unsafe_allow_html=True)
    
    st.markdown("___")
    
    # Questions for Overconfidence Bias
    overconfidence_question_1_options = ['A. Go all-in on a high-risk opportunity.',
                                        'B. Reevaluate your strategy and consider potential risks.',
                                        'C. Diversify your portfolio to manage risk.']
    overconfidence_question_1 = create_question("You've consistently outperformed the market for the past six months. What is your inclination for the next investment decision?", options=overconfidence_question_1_options)

    overconfidence_question_2_options = ['A. Invest a significant portion of your portfolio in that stock.',
                                        'B. Reassess your analysis and consider alternative viewpoints.',
                                        'C. Seek advice from financial experts before making a decision.']
    overconfidence_question_2 = create_question('Your recent analysis indicates a stock is undervalued. What action are you most likely to take?', options=overconfidence_question_2_options)

    overconfidence_question_3_options = ['A. Take bold investment actions without seeking additional information.',
                                        'B. Remain open to different perspectives and adjust your strategy accordingly.',
                                        'C. Actively seek out diverse opinions to challenge your own views.']
    overconfidence_question_3 = create_question('You believe you have a better understanding of the market than most investors. How does this belief influence your investment decisions?', options=overconfidence_question_3_options)

    st.markdown("___")
    # Questions for Loss Aversion Bias
    loss_aversion_question_1_options = ['A. Sell investments to avoid further losses.',
                                        'B. Hold onto your investments and wait for the market to recover.',
                                        'C. Increase your investments to take advantage of lower prices.']
    loss_aversion_question_1 = create_question('Your portfolio has decreased in value by 20% due to a market downturn. What is your immediate response?', options=loss_aversion_question_1_options)

    loss_aversion_question_2_options = ['A. Become more risk-averse and avoid high-risk opportunities.',
                                        'B. Analyze each opportunity individually and assess potential risks and rewards.',
                                        'C. Take more risks to recover losses quickly.']
    loss_aversion_question_2 = create_question('After a series of unsuccessful investments, what is your approach to future investment decisions?', options=loss_aversion_question_2_options)

    loss_aversion_question_3_options = ['A. Opt for the risky option with the potential for substantial gain.',
                                        'B. Choose the option with the guaranteed small gain to avoid potential losses.',
                                        'C. Weigh the options carefully before making a decision.']
    loss_aversion_question_3 = create_question('You are presented with two investment options: one with a 50% chance of a substantial gain and a 50% chance of a moderate loss, and the other with a guaranteed small gain. What would you be more inclined to choose?', options=loss_aversion_question_3_options)

    st.markdown("___")
    # Questions for Confirmation Bias
    confirmation_bias_question_1_options = ['A. Rely solely on your preferred source for investment decisions.',
                                            'B. Occasionally check alternative sources to validate your views.',
                                            'C. Regularly seek out diverse perspectives from various sources.']
    confirmation_bias_question_1 = create_question('Your preferred financial news source consistently supports your investment choices. How does this influence your information-seeking behavior?', options=confirmation_bias_question_1_options)

    confirmation_bias_question_2_options = ['A. Dismiss the contradictory research and stick to your original thesis.',
                                            'B. Reevaluate your thesis and consider the new information.',
                                            'C. Seek additional information to confirm the validity of both perspectives.']
    confirmation_bias_question_2 = create_question('You come across research that contradicts your current investment thesis. What is your response?', options=confirmation_bias_question_2_options)

    confirmation_bias_question_3_options = ['A. Disregard the suggestion, as it goes against your existing beliefs.',
                                            'B. Consider the suggestion and evaluate its merits objectively.',
                                            'C. Follow your friend\'s suggestion without conducting additional research.']
    confirmation_bias_question_3 = create_question('Your friend suggests an investment that contradicts your current strategy. How do you approach this suggestion?', options=confirmation_bias_question_3_options)

    st.markdown("___")
    # Questions for Gambler’s Fallacy
    gamblers_fallacy_question_1_options = ['A. Expect a price decrease since the stock has been rising recently.',
                                            'B. Anticipate a random movement.',
                                            'C. Expect another increase to continue the positive trend.']
    gamblers_fallacy_question_1 = create_question('A stock you own has experienced a series of consecutive price increases. What is your expectation for the next day\'s stock price movement?', options=gamblers_fallacy_question_1_options)

    gamblers_fallacy_question_2_options = ['A. Choose different numbers.',
                                            'B. Stick with the same numbers.',
                                            'C. Avoid playing, as the repeated pattern seems suspicious.']
    gamblers_fallacy_question_2 = create_question('In a lottery, the numbers 1, 2, 3, 4, 5, and 6 have been drawn for three consecutive weeks. What is your expectation for the next draw?', options=gamblers_fallacy_question_2_options)

    gamblers_fallacy_question_3_options = ['A. Bet on black.',
                                            'B. Place a bet on red.',
                                            'C. Avoid betting, as the pattern suggests the wheel may be rigged.']
    gamblers_fallacy_question_3 = create_question('You observe a roulette wheel in a casino, and it lands on red for the past seven spins. What is your expectation for the next spin?', options=gamblers_fallacy_question_3_options)

    st.markdown("___")
    # Questions for Status Quo Bias
    status_quo_bias_question_1_options = ['A. Stick to your current strategy, as it has worked well for you so far.',
                                        'B. Research and assess the new strategy thoroughly before considering a change.',
                                        'C. Adopt the new strategy to capitalize on its recent success.']
    status_quo_bias_question_1 = create_question('You come across a new investment strategy that has shown promising results for other investors. What would be your response?', options=status_quo_bias_question_1_options)

    status_quo_bias_question_2_options = ['A. Hold onto the stock, expecting a potential rebound in the future.',
                                        'B. Sell the underperforming stock to cut losses and explore new opportunities.',
                                        'C. Avoid selling, as the stock has been a reliable long-term investment.']

    status_quo_bias_question_2 = create_question('One of your long-term holdings has underperformed for the past year. What would be your decision?', options=status_quo_bias_question_2_options)

    status_quo_bias_question_3_options = ['A. Resist rebalancing, as the current allocation has been successful.',
                                        'B. Monitor the portfolio but refrain from making any changes unless necessary.',
                                        'C. Rebalance the portfolio to maintain the initial allocation.']
    status_quo_bias_question_3 = create_question('Your investment portfolio has performed well, and it currently aligns with your original asset allocation. What would be your inclination?', options=status_quo_bias_question_3_options)

    st.markdown("___")
    # Questions for Endowment Bias
    endowment_bias_question_1_options = ['A. Avoid making any changes to the inherited portfolio.',
                                        'B. Evaluate the inherited portfolio and make changes if needed.',
                                        'C. Hold onto the inherited stocks as a form of family legacy, but be open for evaluation']
    endowment_bias_question_1 = create_question('You inherit a portfolio of stocks from a family member. How would this inheritance affect your decision-making regarding the inherited stocks?', options=endowment_bias_question_1_options)

    endowment_bias_question_2_options = ['A. Invest more in the property, expecting improved returns.',
                                        'B. Hold onto the property, valuing its sentimental significance.',
                                        'C. Consider selling the property if it aligns with your financial goals.']
    endowment_bias_question_2 = create_question('You own a property that has sentimental value but is not performing well as an investment. What would you be more likely to do?', options=endowment_bias_question_2_options)

    endowment_bias_question_3_options = ['A. Consider investing more in similar items, expecting a future increase in value.',
                                        'B. Hold onto the collectibles, valuing their sentimental and historical significance.',
                                        'C. Evaluate the current market conditions and sell if it makes financial sense.']
    endowment_bias_question_3 = create_question('You have a collection of rare items that you\'ve accumulated over the years. The market for these items has been declining. What would be your decision?', options=endowment_bias_question_3_options)
    st.markdown("___")
    count = 0
    investor_summary_dict = {}
    risk_appetite_dict = {}
    biases_dict = {}

    for q, a in all_qna.items():
        if count < 18:
            investor_summary_dict[q] = a
        
        elif count < 22:
            risk_appetite_dict[q] = a
        
        else:
            biases_dict[q] = a
        count += 1

    st.write(investor_summary_dict)
    st.markdown("___")
    st.write(risk_appetite_dict)
    st.markdown("___")
    st.write(biases_dict)

    button_clicked = st.button("Let's Go!!!", type='primary')



    #st.write(prompt_summary)
    @st.cache_data
    def parse_pdf(_pdf) -> List[str]:
        pdf = _pdf
        output = []
        for page in pdf.pages:
            text = page.extract_text()
            # Merge hyphenated words
            text = re.sub(r"(\w+)-\n(\w+)", r"\1\2", text)
            # Fix newlines in the middle of sentences
            text = re.sub(r"(?<!\n\s)\n(?!\s\n)", " ", text.strip())
            # Remove multiple newlines
            text = re.sub(r"\n\s*\n", "\n\n", text)
            output.append(text)
        return output


    @st.cache_data
    def text_to_docs(text: str) -> List[Document]:
        """Converts a string or list of strings to a list of Documents
        with metadata."""
        if isinstance(text, str):
            # Take a single string as one page
            text = [text]
        page_docs = [Document(page_content=page) for page in text]

        # Add page numbers as metadata
        for i, doc in enumerate(page_docs):
            doc.metadata["page"] = i + 1

        # Split pages into chunks
        doc_chunks = []

        for doc in page_docs:
            text_splitter = RecursiveCharacterTextSplitter(
                chunk_size=4000,
                separators=["\n\n", "\n", ".", "!", "?", ",", " ", ""],
                chunk_overlap=0,
            )
            chunks = text_splitter.split_text(doc.page_content)
            for i, chunk in enumerate(chunks):
                doc = Document(
                    page_content=chunk, metadata={"page": doc.metadata["page"], "chunk": i}
                )
                # Add sources a metadata
                doc.metadata["source"] = f"{doc.metadata['page']}-{doc.metadata['chunk']}"
                doc_chunks.append(doc)
        return doc_chunks


    files=[
    'data/Behavioral Finance and Wealth Management _ how to build optimal portfolios that account for investor biases.pdf',
    'data/rfbr-v2-n1-1-pdf.pdf',
    'data/Wealth Management Treatise.pdf',
    'data/rflr-v5-n1-1-pdf.pdf'
    ]
    docs=[]
    pages=[]

    for file in files:
        docs.extend(parse_pdf(PdfReader(file)))
    for doc in docs:
        pages.extend(text_to_docs(doc))
    persist_directory = 'docs/chroma/'
    def test_embed():
        embedding = OpenAIEmbeddings(openai_api_key=api)
        # Indexing
        # Save in a Vector DB
        with st.spinner("It's indexing..."):
                # Create the vector store
            vectordb = Chroma.from_documents(
            documents=pages,
            embedding=embedding,
            persist_directory=persist_directory)
            print(vectordb._collection.count())
            # index = FAISS.from_documents(pages, embeddings)
        st.success("Embeddings done.", icon="✅")
        return vectordb
     

    
    if (os.path.isdir('docs/chroma/')):
            embedding = OpenAIEmbeddings()
            VectorStore = Chroma(persist_directory=persist_directory, embedding_function=embedding)
            print(VectorStore._collection.count())
    else:
        VectorStore = test_embed()

    template = """This is a conversation between a human and a bot:

    {chat_history}

    Write a summary of the conversation for {input}:
    """

    prompt = PromptTemplate(input_variables=["input", "chat_history"], template=template)
    memory = ConversationBufferMemory(memory_key="chat_history")
    readonlymemory = ReadOnlySharedMemory(memory=memory)

            # embeddings = OpenAIEmbeddings()
        # VectorStore = FAISS.from_texts(chunks, embedding=embeddings)

        # Accept user questions/query

    qa = RetrievalQA.from_chain_type(
    llm=OpenAI(openai_api_key=api),
    chain_type = "stuff",
    retriever=VectorStore.as_retriever(search_kwargs = {"k":3}),
    )
    # Set up the conversational agent
    tool_qa = Tool(
            name="State of Union QA System",
            func=qa.run,
            description="Useful for when you need to answer questions about the aspects asked. Input may be a partial or fully formed question.",
        )
    
    prefix = """Have a conversation with a human, answering the following questions as best you can based on the context and memory available. 
                """
    suffix = """Begin!"
        {chat_history}
        Question: {input}
        {agent_scratchpad}"""

    # search = SerpAPIWrapper(serpapi_api_key = serp_api)

    prompt = ZeroShotAgent.create_prompt(
        tools=[tool_qa],
        prefix=prefix,
        suffix=suffix,
        input_variables=["input", "chat_history", "agent_scratchpad"],
    )
    def chart(json_data):

        try:



            parsed_data = json.loads(json_data)

            biases = parsed_data['Biases']
            remedies = parsed_data['Remedies']
            # Your biases dictionary
            #"biases = {'Self-Control Bias': 'Moderate', 'Affinity Bias': 'Low', 'Outcome Bias': 'Moderate', 'Illusion of Control Bias': 'Low'}

            # Mapping the levels to numeric values
            level_mapping = {'Low': 1, 'Moderate': 2, 'High': 3}  # Assigning numeric values to levels

            # Convert the dictionary to a DataFrame
            bias_df = pd.DataFrame(list(biases.items()), columns=['Bias', 'Level'])
            bias_df['Level Numeric'] = bias_df['Level'].map(level_mapping)

            # Create a radar chart
            fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))
            labels = bias_df['Bias']
            values = bias_df['Level Numeric']

            angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()

            values = np.concatenate((values,[values[0]]))
            angles += angles[:1]

            ax.fill(angles, values, color='skyblue', alpha=0.25)
            ax.plot(angles, values, color='blue', linewidth=2)
            ax.set_yticks([1, 2, 3])  # Setting ticks for levels
            ax.set_yticklabels(['Low', 'Moderate', 'High'])  # Labeling ticks with level names
            ax.set_xticks(angles[:-1])
            ax.set_xticklabels(labels)
            ax.yaxis.grid(True)

            st.title('Biases Radar Chart')
            st.pyplot(fig)
            plt.show()
        except :
            st.write(json_data)


    def remove_text(s):
        l = s.find('{')
        r = s.rfind('}')
        return s[l:r+1]

    count_click = 0
    count_click += int(button_clicked)

    if count_click > 0:
            
        response_summary =response_bias_remedy=asset_response=""
        tab_a, tab_b, tab_c = st.tabs(["Investor Summary", "Behaviourial Biases", "Asset Allocation"]) 

        
        # # response_q_b =  llm_chain({"input":f"Use the dictionary {risk_appetite_dict} and generate an investor summary from a wealth management perspective","chat_history":memory,"agent_scratchpad":""})

        # # response_q_c = llm_chain({"input":f"Use the dictionary {biases_dict} and generate an investor summary from a wealth management perspective","chat_history":memory,"agent_scratchpad":""})
        
        # st.info(response_q_a['text'])

        llm_chain_summary = LLMChain(llm=ChatOpenAI(temperature=0.6, model='gpt-3.5-turbo',openai_api_key = api), prompt=PromptTemplate(input_variables=['imput'],template="""{input}"""))

        with tab_a:


            with st.spinner("It's Analysing..."):

                response_basic_summary =llm_chain_summary({"input":f"""
                The details are provided in a key value format {investor_summary_dict} and {risk_appetite_dict} and {biases_dict}.
                Come up with a summary for the investor in strictly 200
                words .Cover all the details which are provided in the key value format."""})
            st.info(response_basic_summary['text'])
        llm_chain = LLMChain(llm=ChatOpenAI(temperature=0.6, model='gpt-3.5-turbo',openai_api_key = api), prompt=prompt)

        agent = ZeroShotAgent(llm_chain=llm_chain, tools=[tool_qa], verbose=True)
        agent_chain = AgentExecutor.from_agent_and_tools(
        agent=agent, tools=[tool_qa], verbose=True,  memory=ConversationBufferMemory(memory_key="chat_history", input_key='input', output_key="output"),handle_parsing_errors=True,return_intermediate_steps = True)

        with tab_b:
            
                
            with st.spinner("It's Analysing..."):
             
                response_bias_remedy = agent_chain(f"""{response_basic_summary['text']} is given.
                                                   
                Based on above investor's response in Questionnaire format,identify the possible biases that the investor has and also suggest the actionable remedies for the biases.
                Present the output in following manner
                "                                   
                Name of Bias : severity.
                --Provide the remedy for that bias"
                  
                You can to some extent approximate the results based on a similar type of investor incase you don't have all the data.
                  """)
            try:
                st.info((response_bias_remedy['output']))
            except:
                st.info((response_bias_remedy['intermediate_steps']))

        with tab_c :
                
            with st.spinner("It's Analysing..."):
                asset_response = agent_chain(f"""{response_basic_summary['text']}
                    Think like a financial advisor and suggest an asset allocation breakdown for equity ,fixed income,alternatives and cash. Present this in a proper format.Include a detailed breakup with reasoning.
                    In addition to this, provide equity - marketcap breakdown,style breakdown and sector breakdown.For fixed income provide credit quality breakdown ,bond issuer type breakdown and duration breakdown. Provide the rationale for all breakdowns.
                    You can to some extent approximate the results based on a similar type of investor incase you don't have all the data.            
                    Return the output as structured text.""")
                #JSON with key being "asset class","allocation","rationale"
            
            try:
                st.info((asset_response['output']))
            except:
                st.info((asset_response['intermediate_steps']))



                    # chart(f"""{asset_response['output']}""")





        query = st.text_input(
                    "**What's on your mind?**",
                    placeholder="Ask me anything from {}".format("Behaviorial finance"),)
        

        
        if query:


            with st.spinner(
                "Generating Answer to your Query : `{}` ".format(query)
            ):
                res = agent_chain(query)
                st.info(res['output'], icon="🤖")

                # Allow the user to view the conversation history and other information stored in the agent's memory
        with st.expander("History/Memory"):
                memory
    # if query:
    #     # docs = VectorStore.similarity_search(query=query, k=3)

    #     # llm = OpenAI()


    #     # chain = load_qa_chain(llm=llm, chain_type="stuff")
    #     with get_openai_callback() as cb:
    #         response = chain.run(input_documents=docs, question=query)
    #         print(cb)
    #     st.write(response)

def main1():

    sidebar()

    all_qna = {}

    def create_question(question, alt_question=None, options=None, input_type='text'):
        st.markdown(f"<h6 style='margin-bottom: -3em;'>{question}</h6>", unsafe_allow_html=True)
        if options is None:
            if input_type == 'text':
                answer = st.text_input('', key=f'{question}')
            elif input_type == 'number':
                answer = st.number_input('', key=f'{question}', step=1, format='%d')
            elif input_type == 'yesno':
                answer = st.radio('', ['Yes', 'No'], key=f'{question}')
        
        else:
            
            if input_type == 'multiple':
                answer = st.multiselect('', options, key=f'{question}')
            else:
                answer = st.selectbox('', options, key=f'{question}')
        
        all_qna[question] = answer
        
        return answer




    st.title('Questionnaire')



    # Title of the questionnaire
    # st.title('Section A')

    # st.markdown("___")
    st.markdown(f"<center><h4>Client Information</h4></center>", unsafe_allow_html=True)

    col1,col2 = st.columns(2)

    # Questions
    with col1:
        name = create_question('Name')
        age = create_question('Age', input_type='number')
        gender = create_question('Gender', options=['Male', 'Female', 'Other'])
        marital_status = create_question('Marital Status', options=['Single', 'Married', 'Divorced', 'Widowed'])
        
        
    with col2:
        occupation = create_question('Occupation')
        income_options = ['$500,000', '$500,000 - $5,000,000', '$5,000,000 - $10,000,000', '>$10,000,000']
        annual_income = create_question('Annual Income', options=income_options)
        retirement_age = create_question('Target Retirement Age', input_type='number')
        dependents = create_question('No. of dependent family members', input_type='number')

    st.markdown("___")
    st.markdown(f"<center><h4>Investment Objectives</h4></center>", unsafe_allow_html=True)

    col3,col4 = st.columns(2)

    # Questions
    with col3:
        investment_objective_options = [
            'Capital preservation (saving, i.e., preserving capital and avoiding loss of value)',
            'Income generation (constant income in the form of dividends, bond yields, and interest payments)',
            'Long-term growth (do not seek income, capital appreciation)',
            'Growth with Income (seek current income but also seek income and capital growth over time)'
        ]
        investment_objective = create_question('What are your primary investment objective? (Choose one)', options=investment_objective_options)

        # st.markdown(f"<h2>Time Horizon</h2>", unsafe_allow_html=True)
        time_horizon_options = ['Short-term (0-3 years)', 'Medium-term (3-10 years)', 'Long-term (10+ years)']
        investment_time_horizon = create_question('What is your investment time horizon? (Choose one)', options=time_horizon_options)

    with col4:
        short_term_goals_options = [
            'Retirement savings', 'Education funding', 'Wealth transfer', 'Home Purchase/Upgrade/Repairs',
            'Vehicle Purchase', 'Special occasions (like weddings)', 'Philanthropy and charitable giving',
            'Vacation', 'Debt Elimination', 'Other (please specify)'
        ]
        short_term_goals = create_question('Do you have any financial goals below in the short-term? (select all that apply)', options=short_term_goals_options, input_type='multiple')

        long_term_goals_options = [
            'Retirement savings', 'Education funding', 'Wealth transfer', 'Home Purchase', 'Vehicle Purchase',
            'Philanthropy and charitable giving', 'Debt Elimination', 'Other (please specify)'
        ]
        long_term_goals = create_question('Do you have any financial goals below in the long-term? (select all that apply)', options=long_term_goals_options, input_type='multiple')


    st.markdown("___")
    st.markdown(f"<center><h4>Liquidity Needs</h4></center>", unsafe_allow_html=True)

    col5,col6 = st.columns(2)

    # Questions
    with col5:
        liquidity_needs = create_question('Do you have any liquidity requirements or emergency funds to be considered?', input_type='yesno')

    annual_withdrawal_percentage = None
    withdrawal_time_frame = None

    if liquidity_needs == 'Yes':
        with col6:
            annual_withdrawal_options = ['< 2%', '2% - 6%', '> 6%']
            annual_withdrawal_percentage = create_question('What % of the account’s value will you need annually?', options=annual_withdrawal_options)

            withdrawal_time_options = ['Immediately', '1 – 3 Years', '3 – 5 Years', '5 – 10 Years', '10 – 15 Years', 'Over 15 Years']
            withdrawal_time_frame = create_question('When do you expect to begin withdrawals from account for your goals?', options=withdrawal_time_options)


    st.markdown("___")
    st.markdown(f"<center><h4>Other Preferences</h4></center>", unsafe_allow_html=True)

    # Questions
    international_investments = create_question('Would you consider allocating a portion of your portfolio to international investments', input_type='yesno')

    real_estate_investments = create_question('Would you consider allocating a portion of your portfolio to real estate investments?', input_type='yesno')

    municipal_bonds = create_question('Would you consider allocating a portion of your portfolio to tax-exempt Municipal bonds?', input_type='yesno')
    st.markdown("___")



# # # ____________________________________________________________________________________________________
# # # ____________________________________________________________________________________________________
# # # ____________________________________________________________________________________________________



    # st.title('Section B')    
    
    st.markdown(f"<center><h4>Risk Appetite</h4></center>", unsafe_allow_html=True)
    
    st.markdown("___")
    
    # Questions
    question_1_options = ['A. Sell all of the investments? You do not intend to take risks.',
                        'B. Sell a portion of your portfolio to cut your losses and reinvest into more secure investment assets?',
                        'C. Hold the investment and sell nothing, expecting performance to improve?',
                        'D. Invest more funds to lower your average investment price?.']
    question_1 = create_question('1. Assume you had an initial investment portfolio worth 100,000 dollars. If, due to market conditions, your portfolio fell to 85,000 dollars, would you:', options=question_1_options)

    question_2_options = ['A. I am always concerned about possible losses.',
                        'B. I am somewhat concerned about possible losses.',
                        'C. I usually consider possible gains.',
                        'D. I always consider possible gains.']
    question_2 = create_question('2. When considering your investments and making investment decisions, do you think about the impact of possible losses or possible gains?', options=question_2_options)

    question_3_options = ['A. I am primarily concerned with limiting risk. I am willing to accept lower expected returns in order to limit my chance of loss.',
                        'B. Limiting risk and maximizing return are of equal importance to me. I am willing to accept moderate risk and a moderate chance of loss in order to achieve moderate returns.',
                        'C. I am primarily concerned with maximizing the returns of my investments. I am willing to accept high risk and a high chance of loss in order to maximize my investment return potential.']
    question_3 = create_question('3. Which one of the following statements best describes your attitude toward the trade-off between risk and return?', options=question_3_options)

    question_4_options = ['A. 100% in Investment A and 0% in Investment B',
                        'B. 80% in Investment A and 20% in Investment B',
                        'C. 50% in Investment A and 50% in Investment B',
                        'D. 20% in Investment A and 80% in Investment B',
                        'E. 0% in Investment A and 100% in Investment B']
    question_4 = create_question('4. Consider two different investments:\nInvestment A, which provides an average annual return of 5% with a minimal risk of loss of value\nInvestment B, which provides an average annual return of 10% and a potential loss of 25% or more in any year.\nHow would you divide your investment dollars?', options=question_4_options)

        # st.image('image.jpg', caption='', use_column_width=True)


    st.markdown("___")


    # # # ____________________________________________________________________________________________________
    # # # ____________________________________________________________________________________________________
    # # # ____________________________________________________________________________________________________



    # st.title('Section C')

    
    st.markdown(f"<center><h4>Behavioral Biases</h4></center>", unsafe_allow_html=True)
    
    st.markdown("___")
    
    # Questions for Overconfidence Bias
    overconfidence_question_1_options = ['A. Go all-in on a high-risk opportunity.',
                                        'B. Reevaluate your strategy and consider potential risks.',
                                        'C. Diversify your portfolio to manage risk.']
    overconfidence_question_1 = create_question("You've consistently outperformed the market for the past six months. What is your inclination for the next investment decision?", options=overconfidence_question_1_options)

    overconfidence_question_2_options = ['A. Invest a significant portion of your portfolio in that stock.',
                                        'B. Reassess your analysis and consider alternative viewpoints.',
                                        'C. Seek advice from financial experts before making a decision.']
    overconfidence_question_2 = create_question('Your recent analysis indicates a stock is undervalued. What action are you most likely to take?', options=overconfidence_question_2_options)

    overconfidence_question_3_options = ['A. Take bold investment actions without seeking additional information.',
                                        'B. Remain open to different perspectives and adjust your strategy accordingly.',
                                        'C. Actively seek out diverse opinions to challenge your own views.']
    overconfidence_question_3 = create_question('You believe you have a better understanding of the market than most investors. How does this belief influence your investment decisions?', options=overconfidence_question_3_options)

    st.markdown("___")
    # Questions for Loss Aversion Bias
    loss_aversion_question_1_options = ['A. Sell investments to avoid further losses.',
                                        'B. Hold onto your investments and wait for the market to recover.',
                                        'C. Increase your investments to take advantage of lower prices.']
    loss_aversion_question_1 = create_question('Your portfolio has decreased in value by 20% due to a market downturn. What is your immediate response?', options=loss_aversion_question_1_options)

    loss_aversion_question_2_options = ['A. Become more risk-averse and avoid high-risk opportunities.',
                                        'B. Analyze each opportunity individually and assess potential risks and rewards.',
                                        'C. Take more risks to recover losses quickly.']
    loss_aversion_question_2 = create_question('After a series of unsuccessful investments, what is your approach to future investment decisions?', options=loss_aversion_question_2_options)

    loss_aversion_question_3_options = ['A. Opt for the risky option with the potential for substantial gain.',
                                        'B. Choose the option with the guaranteed small gain to avoid potential losses.',
                                        'C. Weigh the options carefully before making a decision.']
    loss_aversion_question_3 = create_question('You are presented with two investment options: one with a 50% chance of a substantial gain and a 50% chance of a moderate loss, and the other with a guaranteed small gain. What would you be more inclined to choose?', options=loss_aversion_question_3_options)

    st.markdown("___")
    # Questions for Confirmation Bias
    confirmation_bias_question_1_options = ['A. Rely solely on your preferred source for investment decisions.',
                                            'B. Occasionally check alternative sources to validate your views.',
                                            'C. Regularly seek out diverse perspectives from various sources.']
    confirmation_bias_question_1 = create_question('Your preferred financial news source consistently supports your investment choices. How does this influence your information-seeking behavior?', options=confirmation_bias_question_1_options)

    confirmation_bias_question_2_options = ['A. Dismiss the contradictory research and stick to your original thesis.',
                                            'B. Reevaluate your thesis and consider the new information.',
                                            'C. Seek additional information to confirm the validity of both perspectives.']
    confirmation_bias_question_2 = create_question('You come across research that contradicts your current investment thesis. What is your response?', options=confirmation_bias_question_2_options)

    confirmation_bias_question_3_options = ['A. Disregard the suggestion, as it goes against your existing beliefs.',
                                            'B. Consider the suggestion and evaluate its merits objectively.',
                                            'C. Follow your friend\'s suggestion without conducting additional research.']
    confirmation_bias_question_3 = create_question('Your friend suggests an investment that contradicts your current strategy. How do you approach this suggestion?', options=confirmation_bias_question_3_options)

    st.markdown("___")
    # Questions for Gambler’s Fallacy
    gamblers_fallacy_question_1_options = ['A. Expect a price decrease since the stock has been rising recently.',
                                            'B. Anticipate a random movement.',
                                            'C. Expect another increase to continue the positive trend.']
    gamblers_fallacy_question_1 = create_question('A stock you own has experienced a series of consecutive price increases. What is your expectation for the next day\'s stock price movement?', options=gamblers_fallacy_question_1_options)

    gamblers_fallacy_question_2_options = ['A. Choose different numbers.',
                                            'B. Stick with the same numbers.',
                                            'C. Avoid playing, as the repeated pattern seems suspicious.']
    gamblers_fallacy_question_2 = create_question('In a lottery, the numbers 1, 2, 3, 4, 5, and 6 have been drawn for three consecutive weeks. What is your expectation for the next draw?', options=gamblers_fallacy_question_2_options)

    gamblers_fallacy_question_3_options = ['A. Bet on black.',
                                            'B. Place a bet on red.',
                                            'C. Avoid betting, as the pattern suggests the wheel may be rigged.']
    gamblers_fallacy_question_3 = create_question('You observe a roulette wheel in a casino, and it lands on red for the past seven spins. What is your expectation for the next spin?', options=gamblers_fallacy_question_3_options)

    st.markdown("___")
    # Questions for Status Quo Bias
    status_quo_bias_question_1_options = ['A. Stick to your current strategy, as it has worked well for you so far.',
                                        'B. Research and assess the new strategy thoroughly before considering a change.',
                                        'C. Adopt the new strategy to capitalize on its recent success.']
    status_quo_bias_question_1 = create_question('You come across a new investment strategy that has shown promising results for other investors. What would be your response?', options=status_quo_bias_question_1_options)

    status_quo_bias_question_2_options = ['A. Hold onto the stock, expecting a potential rebound in the future.',
                                        'B. Sell the underperforming stock to cut losses and explore new opportunities.',
                                        'C. Avoid selling, as the stock has been a reliable long-term investment.']

    status_quo_bias_question_2 = create_question('One of your long-term holdings has underperformed for the past year. What would be your decision?', options=status_quo_bias_question_2_options)

    status_quo_bias_question_3_options = ['A. Resist rebalancing, as the current allocation has been successful.',
                                        'B. Monitor the portfolio but refrain from making any changes unless necessary.',
                                        'C. Rebalance the portfolio to maintain the initial allocation.']
    status_quo_bias_question_3 = create_question('Your investment portfolio has performed well, and it currently aligns with your original asset allocation. What would be your inclination?', options=status_quo_bias_question_3_options)

    st.markdown("___")
    # Questions for Endowment Bias
    endowment_bias_question_1_options = ['A. Avoid making any changes to the inherited portfolio.',
                                        'B. Evaluate the inherited portfolio and make changes if needed.',
                                        'C. Hold onto the inherited stocks as a form of family legacy, but be open for evaluation']
    endowment_bias_question_1 = create_question('You inherit a portfolio of stocks from a family member. How would this inheritance affect your decision-making regarding the inherited stocks?', options=endowment_bias_question_1_options)

    endowment_bias_question_2_options = ['A. Invest more in the property, expecting improved returns.',
                                        'B. Hold onto the property, valuing its sentimental significance.',
                                        'C. Consider selling the property if it aligns with your financial goals.']
    endowment_bias_question_2 = create_question('You own a property that has sentimental value but is not performing well as an investment. What would you be more likely to do?', options=endowment_bias_question_2_options)

    endowment_bias_question_3_options = ['A. Consider investing more in similar items, expecting a future increase in value.',
                                        'B. Hold onto the collectibles, valuing their sentimental and historical significance.',
                                        'C. Evaluate the current market conditions and sell if it makes financial sense.']
    endowment_bias_question_3 = create_question('You have a collection of rare items that you\'ve accumulated over the years. The market for these items has been declining. What would be your decision?', options=endowment_bias_question_3_options)
    st.markdown("___")
    count = 0
    investor_summary_dict = {}
    risk_appetite_dict = {}
    biases_dict = {}

    for q, a in all_qna.items():
        if count < 18:
            investor_summary_dict[q] = a
        
        elif count < 22:
            risk_appetite_dict[q] = a
        
        else:
            biases_dict[q] = a
        count += 1

    st.write(investor_summary_dict)
    st.markdown("___")
    st.write(risk_appetite_dict)
    st.markdown("___")
    st.write(biases_dict)

    button_clicked = st.button("Let's Go!!!", type='primary')


   

if __name__ == "__main__":
    sidebar()  
    # main()
    main1()
# section_a, section_b, section_c are the dictionaries with the answer variables. 
# They may be text, number, boolean, list or None type based on the questions.
